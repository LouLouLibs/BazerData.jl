import{_ as p,C as h,c as k,o as r,j as i,a as e,aA as l,G as t,w as n}from"./chunks/framework.D_c1PwKr.js";const B=JSON.parse('{"title":"Public Interface","description":"","frontmatter":{},"headers":[],"relativePath":"lib/public.md","filePath":"lib/public.md","lastUpdated":null}'),o={name:"lib/public.md"},d={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""};function y(b,s,F,m,f,C){const a=h("Badge");return r(),k("div",null,[s[20]||(s[20]=i("h1",{id:"Public-Interface",tabindex:"-1"},[e("Public Interface "),i("a",{class:"header-anchor",href:"#Public-Interface","aria-label":'Permalink to "Public Interface {#Public-Interface}"'},"​")],-1)),s[21]||(s[21]=i("h2",{id:"BazerData-Module",tabindex:"-1"},[i("code",null,"BazerData"),e(" Module "),i("a",{class:"header-anchor",href:"#BazerData-Module","aria-label":'Permalink to "`BazerData` Module {#BazerData-Module}"'},"​")],-1)),i("details",d,[i("summary",null,[s[0]||(s[0]=i("a",{id:"BazerData.panel_fill!-Tuple{DataFrames.DataFrame, Symbol, Symbol, Union{Symbol, Vector{Symbol}}}",href:"#BazerData.panel_fill!-Tuple{DataFrames.DataFrame, Symbol, Symbol, Union{Symbol, Vector{Symbol}}}"},[i("span",{class:"jlbinding"},"BazerData.panel_fill!")],-1)),s[1]||(s[1]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[3]||(s[3]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">panel_fill!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Same </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> panel_fill but with modification </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> place</span></span></code></pre></div>`,1)),t(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[2]||(s[2]=[i("a",{href:"https://github.com/eloualiche/BazerData.jl/blob/5faeb3e704b567c33dd3eef7c43492095f8b855a/src/PanelData.jl#L151-L156",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),i("details",g,[i("summary",null,[s[4]||(s[4]=i("a",{id:"BazerData.panel_fill-Tuple{DataFrames.DataFrame, Symbol, Symbol, Union{Symbol, Vector{Symbol}}}",href:"#BazerData.panel_fill-Tuple{DataFrames.DataFrame, Symbol, Symbol, Union{Symbol, Vector{Symbol}}}"},[i("span",{class:"jlbinding"},"BazerData.panel_fill")],-1)),s[5]||(s[5]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[7]||(s[7]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">panel_fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id_var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    time_var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value_var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Symbol, Vector{Symbol}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    gap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Int, DatePeriod}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :backwards</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uniquecheck</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    flag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    merge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><p><code>df::AbstractDataFrame</code>: a panel dataset</p></li><li><p><code>id_var::Symbol</code>: the individual index dimension of the panel</p></li><li><p><code>time_var::Symbol</code>: the time index dimension of the panel (must be integer or a date)</p></li><li><p><code>value_var::Union{Symbol, Vector{Symbol}}</code>: the set of columns we would like to fill</p></li></ul><p><strong>Keywords</strong></p><ul><li><p><code>gap::Union{Int, DatePeriod} = 1</code> : the interval size for which we want to fill data</p></li><li><p><code>method::Symbol = :backwards</code>: the interpolation method to fill the data options are: <code>:backwards</code> (default), <code>:forwards</code>, <code>:linear</code>, <code>:nearest</code> email me for other interpolations (anything from Interpolations.jl is possible)</p></li><li><p><code>uniquecheck::Bool = true</code>: check if panel is clean</p></li><li><p><code>flag::Bool = false</code>: flag the interpolated values</p></li><li><p><code>merge::Bool = false</code>: merge the new values with the input dataset</p></li></ul><p><strong>Returns</strong></p><ul><li><code>AbstractDataFrame</code>:</li></ul><p><strong>Examples</strong></p><ul><li>See tests</li></ul>`,9)),t(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[6]||(s[6]=[i("a",{href:"https://github.com/eloualiche/BazerData.jl/blob/5faeb3e704b567c33dd3eef7c43492095f8b855a/src/PanelData.jl#L2-L35",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),i("details",c,[i("summary",null,[s[8]||(s[8]=i("a",{id:"BazerData.tabulate-Tuple{DataFrames.AbstractDataFrame, Union{Symbol, Vector{Symbol}}}",href:"#BazerData.tabulate-Tuple{DataFrames.AbstractDataFrame, Union{Symbol, Vector{Symbol}}}"},[i("span",{class:"jlbinding"},"BazerData.tabulate")],-1)),s[9]||(s[9]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tabulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Symbol, Array{Symbol}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reorder_cols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:stdout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>This was forked from TexTables.jl and was inspired by <a href="https://github.com/matthieugomez/statar" target="_blank" rel="noreferrer">https://github.com/matthieugomez/statar</a></p><p><strong>Arguments</strong></p><ul><li><p><code>df::AbstractDataFrame</code>: Input DataFrame to analyze</p></li><li><p><code>cols::Union{Symbol, Vector{Symbol}}</code>: Single column name or vector of column names to tabulate</p></li><li><p><code>group_type::Union{Symbol, Vector{Symbol}}=:value</code>: Specifies how to group each column:</p><ul><li><p><code>:value</code>: Group by the actual values in the column</p></li><li><p><code>:type</code>: Group by the type of values in the column</p></li><li><p><code>Vector{Symbol}</code>: Vector combining <code>:value</code> and <code>:type</code> for different columns</p></li></ul></li><li><p><code>reorder_cols::Bool=true</code> Whether to sort the output by sortable columns</p></li><li><p><code>format_tbl::Symbol=:long</code> How to present the results long or wide (stata twoway)</p></li><li><p><code>format_stat::Symbol=:freq</code> Which statistics to present for format :freq or :pct</p></li><li><p><code>skip_stat::Union{Nothing, Symbol, Vector{Symbol}}=nothing</code> do not print out all statistics (only for string)</p></li><li><p><code>out::Symbol=:stdout</code> Output format:</p><ul><li><p><code>:stdout</code> Print formatted table to standard output (returns nothing)</p></li><li><p><code>:df</code> Return the result as a DataFrame</p></li><li><p><code>:string</code> Return the formatted table as a string</p></li></ul></li></ul><p><strong>Returns</strong></p><ul><li><p><code>Nothing</code> if <code>out=:stdout</code></p></li><li><p><code>DataFrame</code> if <code>out=:df</code></p></li><li><p><code>String</code> if <code>out=:string</code></p></li></ul><p><strong>Output Format</strong></p><p>The resulting table contains the following columns:</p><ul><li><p>Specified grouping columns (from <code>cols</code>)</p></li><li><p><code>freq</code>: Frequency count</p></li><li><p><code>pct</code>: Percentage of total</p></li><li><p><code>cum</code>: Cumulative percentage</p></li></ul><p><strong>TO DO</strong></p><p>allow user to specify order of columns (reorder = false flag)</p><p><strong>Examples</strong></p><p>See the README for more examples</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Simple frequency table for one column</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tabulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Group by value type</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tabulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, group_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Multiple columns with mixed grouping</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tabulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], group_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Return as DataFrame instead of printing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result_df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tabulate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:df</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,14)),t(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[10]||(s[10]=[i("a",{href:"https://github.com/eloualiche/BazerData.jl/blob/5faeb3e704b567c33dd3eef7c43492095f8b855a/src/StataUtils.jl#L18-L72",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),i("details",E,[i("summary",null,[s[12]||(s[12]=i("a",{id:"BazerData.winsorize-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T",href:"#BazerData.winsorize-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T"},[i("span",{class:"jlbinding"},"BazerData.winsorize")],-1)),s[13]||(s[13]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[15]||(s[15]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">winsorize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    probs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Tuple{Real, Real}, Nothing}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cutpoints</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Tuple{Real, Real}, Nothing}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    replace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :missing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Arguments</strong></p><ul><li><code>x::AbstractVector</code>: a vector of values</li></ul><p><strong>Keywords</strong></p><ul><li><p><code>probs::Union{Tuple{Real, Real}, Nothing}</code>: A vector of probabilities that can be used instead of cutpoints</p></li><li><p><code>cutpoints::Union{Tuple{Real, Real}, Nothing}</code>: Cutpoints under and above which are defined outliers. Default is (median - five times interquartile range, median + five times interquartile range). Compared to bottom and top percentile, this takes into account the whole distribution of the vector</p></li><li><p><code>replace_value::Tuple</code>: Values by which outliers are replaced. Default to cutpoints. A frequent alternative is missing.</p></li><li><p><code>IQR::Real</code>: when inferring cutpoints what is the multiplier from the median for the interquartile range. (median ± IQR * (q75-q25))</p></li><li><p><code>verbose::Bool</code>: printing level</p></li></ul><p><strong>Returns</strong></p><ul><li><code>AbstractVector</code>: A vector the size of x with substituted values</li></ul><p><strong>Examples</strong></p><ul><li>See tests</li></ul><p>This code is based on Matthieu Gomez winsorize function in the <code>statar</code> R package</p>`,10)),t(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[14]||(s[14]=[i("a",{href:"https://github.com/eloualiche/BazerData.jl/blob/5faeb3e704b567c33dd3eef7c43492095f8b855a/src/Winsorize.jl#L2-L28",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),i("details",u,[i("summary",null,[s[16]||(s[16]=i("a",{id:"BazerData.xtile-Union{Tuple{T}, Tuple{AbstractVector{T}, Integer}} where T<:Real",href:"#BazerData.xtile-Union{Tuple{T}, Tuple{AbstractVector{T}, Integer}} where T<:Real"},[i("span",{class:"jlbinding"},"BazerData.xtile")],-1)),s[17]||(s[17]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[19]||(s[19]=l(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">xtile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n_quantiles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             weights</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{Float64}, Nothing}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Int}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Real</span></span></code></pre></div><p>Create quantile groups using Julia&#39;s built-in weighted quantile functionality.</p><p><strong>Arguments</strong></p><ul><li><p><code>data</code>: Values to group</p></li><li><p><code>n_quantiles</code>: Number of groups</p></li><li><p><code>weights</code>: Optional weights of weight type (StatasBase)</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sales </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xtile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sales, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xtile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sales, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, weights</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Weights</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sales))) );</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span></code></pre></div>`,6)),t(a,{type:"info",class:"source-link",text:"source"},{default:n(()=>s[18]||(s[18]=[i("a",{href:"https://github.com/eloualiche/BazerData.jl/blob/5faeb3e704b567c33dd3eef7c43492095f8b855a/src/StataUtils.jl#L436-L454",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})])])}const A=p(o,[["render",y]]);export{B as __pageData,A as default};
